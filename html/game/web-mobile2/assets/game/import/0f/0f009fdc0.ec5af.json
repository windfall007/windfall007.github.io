[1,["f3MeijGI9Hm6hwM1MSED69","29h0MfALhMi4KmnxaFm0RH"],["testureNoise","_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Material",["_name","_techniqueData"],2,11]],[[0,0,1,2,4],[1,0,1,2]],[[[[0,"801",[{"hash":1828171845,"record":null,"name":"801|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform myData{\n  vec4 hitColor;\n  vec4 noiseColor;\n};\n#endif\n#if USE_NOISE\nuniform sampler2D testureNoise;\n#endif\nvoid main () {\n  vec4 texColor = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 finalColor = vec4(1, 1, 1, 1);\n  finalColor.rgb = mix(texColor.rgb, hitColor.rgb, (1.0-v_color.a)*texColor.a);\n  finalColor.a = texColor.a*1.0;\n  #if USE_NOISE\n    vec4 a = vec4(1,1,1,1);\n  vec4 testureNoise_tmp = texture(testureNoise, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_testureNoise\n      testureNoise_tmp.a *= texture(testureNoise, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    a.rgb *= (testureNoise_tmp.rgb * testureNoise_tmp.rgb);\n    a.a *= testureNoise_tmp.a;\n  #else\n    a *= testureNoise_tmp;\n  #endif\n    finalColor.a *= step(1.0-v_color.r, a.r);\n    float noiseEdgeValue =  step(v_color.r, a.r);\n    finalColor.rgb = mix(finalColor.rgb, noiseColor.rgb, noiseEdgeValue);\n  #endif\n  gl_FragColor = finalColor;\n  #if USE_BGRA\n    gl_FragColor = finalColor.bgra;\n  #else\n    gl_FragColor = finalColor.rgba;\n  #endif\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}","frag":"\nprecision highp float;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform vec4 hitColor;\nuniform vec4 noiseColor;\n#endif\n#if USE_NOISE\nuniform sampler2D testureNoise;\n#endif\nvoid main () {\n  vec4 texColor = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    texColor.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    texColor.a *= texture_tmp.a;\n  #else\n    texColor *= texture_tmp;\n  #endif\n  #endif\n  vec4 finalColor = vec4(1, 1, 1, 1);\n  finalColor.rgb = mix(texColor.rgb, hitColor.rgb, (1.0-v_color.a)*texColor.a);\n  finalColor.a = texColor.a*1.0;\n  #if USE_NOISE\n    vec4 a = vec4(1,1,1,1);\n  vec4 testureNoise_tmp = texture2D(testureNoise, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_testureNoise\n      testureNoise_tmp.a *= texture2D(testureNoise, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    a.rgb *= (testureNoise_tmp.rgb * testureNoise_tmp.rgb);\n    a.a *= testureNoise_tmp.a;\n  #else\n    a *= testureNoise_tmp;\n  #endif\n    finalColor.a *= step(1.0-v_color.r, a.r);\n    float noiseEdgeValue =  step(v_color.r, a.r);\n    finalColor.rgb = mix(finalColor.rgb, noiseColor.rgb, noiseEdgeValue);\n  #endif\n  gl_FragColor = finalColor;\n  #if USE_BGRA\n    gl_FragColor = finalColor.bgra;\n  #else\n    gl_FragColor = finalColor.rgba;\n  #endif\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"CC_USE_MODEL","type":"boolean","defines":[]},{"name":"USE_NOISE","type":"boolean","defines":[]},{"name":"CC_USE_ALPHA_ATLAS_texture","type":"boolean","defines":["USE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_testureNoise","type":"boolean","defines":["USE_NOISE"]},{"name":"USE_BGRA","type":"boolean","defines":[]}],"blocks":[{"name":"myData","binding":0,"members":[{"name":"hitColor","type":16,"count":1},{"name":"noiseColor","type":16,"count":1}],"defines":["USE_TEXTURE"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]},{"name":"testureNoise","type":29,"count":1,"binding":31,"defines":["USE_NOISE"]}]}],[{"passes":[{"program":"801|vs|fs","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"hitColor":{"editor":null,"type":16,"value":[255,255,255,255]},"noiseColor":{"editor":null,"type":16,"value":[255,255,255,255]},"testureNoise":{"value":"white","type":29}}}]}]]],0,0,[],[],[]],[[[1,"801",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"INPUT_IS_GAMMA":false,"USE_NOISE":true}},"props",11,[{},"testureNoise",6,0]]]]],0,0,[0,0],[0,1],[0,1]]]]